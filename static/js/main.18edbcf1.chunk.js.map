{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WIDTH","HEIGHT","MARGIN","top","right","bottom","left","ScatterPlot","useState","data","setData","useEffect","a","d3","name","x","mpg","y","hp","fetchData","timeoutId","setTimeout","nextData","slice","map","item","Math","min","max","parseFloat","random","toFixed","clearTimeout","scatterPlotRef","useRef","domain","nice","range","xAxis","useCallback","g","attr","call","select","remove","append","text","yAxis","clone","svg","current","dataDot","dataText","d","selectAll","join","enter","update","transition","duration","exit","width","height","ref","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18edbcf1.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport * as d3 from \"d3\";\n\nconst WIDTH = 800;\nconst HEIGHT = 400;\nconst MARGIN = { top: 20, right: 30, bottom: 30, left: 40 };\n\nfunction ScatterPlot() {\n  const [data, setData] = useState([]);\n  // fetch initial data\n  useEffect(() => {\n    const fetchData = async () => {\n      setData(\n        await d3.csv(\n          \"https://gist.githubusercontent.com/mbostock/77a98cd519be20ea1f8e33bbd3617ac2/raw/574433e95e983b288a54f4d2217cb39d1557cd8d/mtcars.csv\",\n          ({ name, mpg: x, hp: y }) => ({ name, x: +x, y: +y })\n        )\n      );\n    };\n    fetchData();\n  }, []);\n\n  // randomize data every 1.5 seconds\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      const nextData = data.slice().map(item => {\n        if (item.x && item.y) {\n          return {\n            ...item,\n            x: Math.min(\n              Math.max(\n                item.x + parseFloat((Math.random() * 10).toFixed(1)) - 5,\n                0\n              ),\n              50\n            ),\n            y: Math.min(\n              Math.max(\n                item.y + parseFloat((Math.random() * 10).toFixed(1)) - 5,\n                0\n              ),\n              400\n            )\n          };\n        } else {\n          return item;\n        }\n      });\n      setData(nextData);\n    }, 1500);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [data]);\n\n  const scatterPlotRef = useRef(null);\n\n  const x = d3\n    .scaleLinear()\n    .domain([0, 50])\n    .nice()\n    .range([MARGIN.left, WIDTH - MARGIN.right]);\n  const xAxis = useCallback(\n    g => {\n      return g\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", `translate(0,${HEIGHT - MARGIN.bottom})`)\n        .call(d3.axisBottom(x))\n        .call(g => g.select(\".domain\").remove())\n        .call(g =>\n          g\n            .append(\"text\")\n            .attr(\"x\", WIDTH - MARGIN.right)\n            .attr(\"y\", -4)\n            .attr(\"fill\", \"#000\")\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"text-anchor\", \"end\")\n            .text(\"Miles per gallon\")\n        );\n    },\n    [x]\n  );\n\n  const y = d3\n    .scaleLinear()\n    .domain([0, 400])\n    .nice()\n    .range([HEIGHT - MARGIN.bottom, MARGIN.top]);\n  const yAxis = useCallback(\n    g => {\n      return g\n        .attr(\"class\", \"y axis\")\n        .attr(\"transform\", `translate(${MARGIN.left},0)`)\n        .call(d3.axisLeft(y))\n        .call(g => g.select(\".domain\").remove())\n        .call(g =>\n          g\n            .select(\".tick:last-of-type text\")\n            .clone()\n            .attr(\"x\", 4)\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"font-weight\", \"bold\")\n            .text(\"Horsepower\")\n        );\n    },\n    [y]\n  );\n\n  useEffect(() => {\n    const svg = d3.select(scatterPlotRef.current);\n\n    svg.append(\"g\").call(xAxis);\n    svg.append(\"g\").call(yAxis);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"dots-container\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10);\n  }, [scatterPlotRef, xAxis, yAxis]);\n\n  useEffect(() => {\n    const svg = d3.select(scatterPlotRef.current);\n\n    const dataDot = g =>\n      g\n        .append(\"circle\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"fill\", \"none\")\n        .attr(\"r\", 3);\n\n    const dataText = g =>\n      g\n        .append(\"text\")\n        .attr(\"dy\", \"0.35em\")\n        .attr(\"x\", 7)\n        .text(d => d.name);\n\n    svg\n      .select(\".dots-container\")\n      .selectAll(\"g\")\n      .data(data)\n      .join(\n        enter =>\n          enter\n            .append(\"g\")\n            .attr(\"transform\", d => `translate(${x(d.x)},${y(d.y)})`)\n            .attr(\"class\", \"dots\")\n            .call(dataDot)\n            .call(dataText),\n        update =>\n          update\n            .transition()\n            .duration(500)\n            .attr(\"transform\", d => `translate(${x(d.x)},${y(d.y)})`),\n        exit => exit.remove()\n      );\n  }, [data, scatterPlotRef, x, y]);\n\n  return <svg width={WIDTH} height={HEIGHT} ref={scatterPlotRef} />;\n}\n\nexport default ScatterPlot;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}